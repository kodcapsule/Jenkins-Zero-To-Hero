pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    // =================== CHECKOUT CODE FROM GITHUB REPO  =====================
    // Checkout the code from GitHub repository
    // This stage will clone the GitHub repository containing the Java application code
    // and the Jenkinsfile
    // =====================================================================

    stage('Checkout') {
      steps {
        sh 'echo Checkout stage passed'
        //git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
      }
    }



    // =================== BUILD AND TEST  =====================
    // Build and Test the Java Application using Maven
    // This stage will build the Java application and run tests using Maven
    // =====================================================

    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }


    // =================== STAIC CODE ANALYSIS  =====================
    // Static Code Analysis using SonarQube
    // ============================================================
        stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://3.145.70.185:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    // =================  BUILD DOCKER IMAGES   =====================
    // Build and Push Docker Image to Docker Hub
    // This stage will build a Docker image and push it to Docker Hub
    // ==============================================================  
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "abhishekf5/ultimate-cicd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
    // =================== DEPLOY TO KUBERNETES CLUSTER   ======================
    // Deploy to Kubernetes using HArgoCD
    // This stage will deploy the application to a Kubernetes cluster using ArgoCD
    // =====================================================================
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
            GIT_USER_NAME = "iam-veeramalla"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "abhishek.xyz@gmail.com"
                    git config user.name "Abhishek Veeramalla"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }

    
  }

  post {
    always {
      // Clean up workspace after the build
      cleanWs()
    }
    success {
      echo 'Build completed successfully!'
      // Send notification to Slack or any other service
      slackSend (channel: '#jenkins', message: "Build ${env.BUILD_NUMBER} completed successfully!") 

    }
    failure {
      echo 'Build failed!'
      // Send notification to Slack or any other service
      slackSend (channel: '#jenkins', message: "Build ${env.BUILD_NUMBER} failed!")
    }
  }
 
}
